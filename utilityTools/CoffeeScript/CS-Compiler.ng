// ==NILScript==
// @name CoffeeScript Complier
// @namespace http://efcl.info/
// @description CoffeeScript Compiler by SpiderMonkey
// @author azu
// @homepage http://efcl.info/
// @twitter https://twitter.com/azu_re
// ==/NILScript==

include("coffee-script.js");
var cs = {};
cs.files = [];//コンパイル対象
// cs.depth = 0;// ディレクトリの深さ
cs.checkedDir = false;
(function() {
    // 対象coffeeファイルをリストに入れる
    addFile(Main.params);
    // println("対象ファイル" , cs.files.join("\n"))
    handleFile();
    function addFile(params) {

        params.toArray && (params = params.toArray());// ジェネレーターを配列へ
        // オプション登録
        for (var i = 0,len = params.length; i < len; i++) {
            var param = params[i];
            switch (true) {
                case ("--watch" === param || "-w" === param):
                    cs._optWatch = true;
                    params.splice(i, 1);// マッチしたら取り除く
                    break;
                default:
                    break;
            }
        }
        for (var i = 0,len = params.length; i < len; i++) {
            var param = params[i];
            var File = getFile(param);
            if (File) {
                // ファイル登録
                switch (true) {
                    // coffeeファイル
                    case (File.attributes.archive && File.extLC === ".coffee"):
                        cs.files.push(File);
                        break;
                    // ディレクトリなら再帰
                    case (File.attributes.directory):
                        addFile(File.children);// ファイルを登録
                        cs._optWatch && checkModify(File);// ディレクトリを監視
                        break;
                    default:
                        break;
                }
            } else {

            }
        }
    }

    // パスからファイルオブジェクトを取得
    function getFile(path) {
        var File = cwd().file(path);
        if (File.exists) {
            return File;
        }
    }

    // 受け取った引数を元に処理
    function handleFile(targetFiles) {
        var handleFnStack = [];
        targetFiles = targetFiles || cs.files;
        handleFnStack.push(compileCS);
        if (cs._optWatch) {
            Main.createNotifyIcon();// 変更を監視するため
            handleFnStack.push(checkModify);
        }
        // それぞれのFileオブジェクトに処理をする
        for (var i = 0,len = targetFiles.length; i < len; i++) {
            var File = getFile(targetFiles[i]);
            handleFnStack.forEach(function(fn) {
                fn(File);
            })
        }
    }

    function compileCS(File) {
        var result = null;
        var jsFile = File.changeExtension(".js");// .coffee => .js
        try {
            result = CoffeeScript.compile(File.load())
        } catch(e) {
            println("E -- " + File.name + " -- " + e);
            return e;
        }
        createJavaScript(jsFile, result);
    }

    function createJavaScript(File, content) {
        if (!(File && content)) return;
        File.update(content, "UTF-8");
        println("C -- " + File.name + " -- " + Date.now())
    }

    function checkModify(File, threshold) {
        // http://d.hatena.ne.jp/brazil/20110131/1296419283
        var last = Date.now();
        var threshold = threshold || 100;// 差の時間
        if (File.attributes.directory) {
            //Direcotryは追加を監視
            File.observe('add', function(o) {
                var addtionalFile = o.file;// 追加されたファイル
                if (addtionalFile.exists &&
                        addtionalFile.attributes.archive && addtionalFile.extLC === ".coffee") {
                    handleFile([addtionalFile]);// 監視対象へ加える
                }
            })
        } else {// fileなら変更監視
            File.observe('modify', function(o) {
                var now = Date.now();
                if (now - last < threshold) {
                    compileCS(File);
                }
                last = now;
            });
        }
    }
})()