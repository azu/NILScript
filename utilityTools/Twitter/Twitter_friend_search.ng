/* 自分のフォローしてる人からユーザー名を検索する→コピー */
include("OAuth.ng");
/* ここまで */
var clientInfo = {
    name: 'NILScript',
    consumerKey: 'T0Wsr0pjQRqV0Xi56g0EJA',
    consumerSecret: '3BV9UhiJ97WcW0Phull8NQbnErPLlT3fSDoxHIcJ0Dg',
}
// TwitterOauthにクライアント情報を渡してnewする(必須)
var tw = new TwitterOauth(clientInfo);
var ownScreenName = pref("verify_credentials.json",1).loadJSON();
if(tw.isAuthorize()){
    if(!ownScreenName){
        tw.get("http://api.twitter.com/1/account/verify_credentials.json" ,null ,function(res){
            var json = JSON.parse(res);
            ownScreenName = json.screen_name;// ユーザー名
            pref("verify_credentials.json",1).saveJSON(json);
        });
    }else{
        ownScreenName = ownScreenName.screen_name;
    }
    inputWindow();
}else{
    tw.getRequestToken(function(res){
        openBrowser(res);
    });
}
function inputWindow(){
    with(require('Window')){
        var win = Window.create({
            title:'Twitter friend search',
            width:240,height:420,
            left:400,top:400,
            commands:{
                'copyName' :function(){
                    var selectUser = this.userNameInput.selectedString;
                    var Clipboard = require('Clipboard').Clipboard;
                    try {
                        var clip = Clipboard.open();
                        clip.text = selectUser;
                    } catch (e) {
                        println(e);
                    } finally {
                        clip.close();
                    };
                },
                'exec' : function () {
                    this.executeCommand("copyName");// copyNameのコマンドを実行
                    this.close(true);
                },
                'cancel' : function () (this.close(true)),
            },
            accelerators : {
                'Ctrl+C' : 'copyName',
                'Enter' : 'exec',
                'Esc' : 'cancel',
            },
            children:{
                userNameInput:{
                    type:ComboBox,
                    text:'username',
                    items:[],
                    top:10,left:40,
                    droppedCount:15,
                    hasVScroll:true,
                    bottom:0,
                    width:128,
                    height:48,
                    events: {
                        change: function(o) {
                            this.open();
                        },
                        focus: function(){
                            this.open();
                        }
                    }
                },
                update:{
                    type:Button,
                    text:"更新",
                    height:24,
                    width:48,
                    right:2,
                    top:8,
                    events:{
                        click:function(o){
                            this.parent.message.text = "アップデート中"
                            var json = updateFriend();
                            var friendNames = []
                            for (var i=0,l= json.length;i < l; i++) {
                                friendNames[i]  = json[i].screen_name;
                            };
                            this.parent.userNameInput.items = friendNames.sort();
                            this.parent.message.text = "アップデート完了"
                        },
                    },
                },
                message: {
                    noHideSel: true,
                    type: Static,
                    text:"",
                    wantReturn: true,
                    height:24,
                    width:230,
                    bottom:10,
                    left: 5,
                    right: 5,
                },
                description: {
                    noHideSel: true,
                    type: Static,
                    text:"ユーザー名を途中まで入力した状態で↓を押すとそれにマッチしたユーザーまで移動できる\n\n"
                        +"ユーザーを選択した状態で\n"
                        +"Ctrl+C : ユーザー名のコピー\n"
                        +"Enter : ユーザー名をコピーして終了\n",
                    wantReturn: true,
                    height:120,
                    width:230,
                    bottom:50,
                    left: 5,
                    right: 5,
                },
            }
        }).show();
        var json =pref("friendlist.json",1).loadJSON();
        if(!json){
            win.message.text = "アップデート中"
            json = updateFriend();
            win.message.text = "アップデート完了"
        }
        var friendNames = []
        for (var i=0,l= json.length;i < l; i++) {
            friendNames[i]  = json[i].screen_name;
        };
        win.userNameInput.items = friendNames.sort();
        win.message.text = "セットアップ完了"
        win.focus('userNameInput');
    }
}
function updateFriend(){
    var json = [];
    // スレッドの意味なし
    var thread = Thread.create(function(){
        var res = getFriend(ownScreenName);
        // https://twitter.com/azu_re/statuses/19243432036
        json = Array.concat.apply(0,res);
        pref("friendlist.json",1).saveJSON(json);
    });
    thread.waitExit();
    return json;
}
function getFriend(user , cursor, result){
    var result = (result)? result : [];
    println(result.length);
    var query = {
        cursor : (cursor)? cursor : -1,
    };
    tw.get("http://api.twitter.com/1/statuses/friends/"+user+".json" ,query , function(res){
        var json = JSON.parse(res);
        result.push(json.users);
        if(json.next_cursor){
            getFriend(user , json.next_cursor ,result)
        }
    });
    return result;
}