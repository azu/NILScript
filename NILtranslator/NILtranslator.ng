// ==NILScript==
// @name NILtranslator
// @namespace http://efcl.info/
// @description コピーしたテキストを翻訳表示する
// @author azu
// @homepage http://efcl.info/
// @twitter https://twitter.com/azu_re
// ==/NILScript==
// タスクバーアイコン
Main.createNotifyIcon();
//安定性向上のため推奨
Main.process.priority = Process.priority.high;
var Clipboard = require('Clipboard').Clipboard;
var Hotstrokes = require('Hotstrokes').Hotstrokes;
var Mouse = require('Mouse').Mouse;
var Display = require('Window').Display;
var http = new require("HTTP").HTTP();
use('Window', 'ATL', 'HTTPD');
// MVC的に作りたい
/*
 http://www.diffshare.com/blog/archives/1625
 controll - 操作する,Command
 model - 外部APIをたたいてデータの取得、変更の通知,ValueObject
 view - 結果の表示、ローカルサーバ,Mediator
 C→M→V
 UI→Mediator(V)→{M or C}
 C(データの取得依頼)→M→外部データ取得→C→M→V
 */
var controll = {}, model = {}, view = {};

/*controll*/
controll.hideWindow = function hideWindow(win) {
    if (!win) {
        win = view.popup.getWindow();
    }
    win.hide();
    return this;
}
controll.hideWindowDelay = function(win, msec) {
    controll.stopHideTimer();
    view.popup.timer = new Timer((function() {
        controll.hideWindow(win);
    }), msec, true);
    view.popup.timer.run();
    return this;
}
controll.stopHideTimer = function() {
    if (view.popup.timer && view.popup.timer.running) {
        view.popup.timer.stop();
    }
}
// ウィンドウを最前面に表示
controll.showWindow = function(win) {
    controll.stopHideTimer();
    if (!win) {
        win = view.popup.getWindow();
    }
    if (!win.visible) {
        win.show(true);
    }
    win.topmost = true;
    return this;
}
/*model*/
model.init = function() {
    var max = 10;
    var hist = [Clipboard.text];
    Clipboard.observe('change', function(obj) {
        if (this.hasFormat('text')) {
            var text = this.text;
            if (text && (hist.indexOf(text) == -1)) {
                hist.unshift(text);
                hist = hist.slice(0, max);
                view.translateText(text);
            }
        }
    });
}
/**
 * http://www.excite.co.jp/world/english/ で英日翻訳
 * @param str
 * @param callback
 */
model.getExcite = function(str, callback) {
    var API = "http://www.excite.co.jp/world/english/"
    var searchRegexp = model.getExcite.regexp || (model.getExcite.regexp = /id="after">([^<]*?)</m);
    var xhr = http.request({
        method: "post",
        url: API,
        headers: {
            'User-agent': 'Mozilla/5.0 (compatible)',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/atom+xml,application/xml,text/xml'
        },
        body: "before=" + str.replace(/\s/g, "+") + "&wb_lp=ENJA",
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var input = res.readText();
                    if (searchRegexp.test(input)) {
                        var match = input.match(searchRegexp);
                        callback((match && match[1]) || false);
                    } else {
                        alert("No matches found!");
                    }
                } else {
                    // callback(res.statusText);
                }
            }
        }
    }).send();
}
/**
 * http://www.alc.co.jp/ で翻訳
 * @param word
 * @param callback
 */
model.getALC = function (word, callback) {
    var API = (/^http/.test(word)) ? word : "http://eow.alc.co.jp/eow/sp/" + word + "/UTF-8/";
    var xhr = http.request({
        method: "get",
        url: API,
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var resTxt = res.readText();
                    callback(resTxt);
                } else {
                    //callback(res.statusText);
                }
            }
        }
    }).send();
}
// cssファイルを読み込む
model.popupStyle = Main.scriptDirectory.file("panel-style.css").load();
model.createViewHTML = function(text) {
    var style = model.popupStyle;
    var HTML = '<html>'
            + '<head>'
            + '<style type="text/css">'
            + style
            + '</style>'
            + '<script type="text/javascript">'
            + 'document.createElement("kn");document.createElement("md");//IE Hack'
            + '</script>'
            + '</head>'
            + '<body>'
            + '<div id="main">'
            + text
            + '</body>'
            + '</html>';
    println(HTML);
    return HTML;
}
// HTMLエンティティしたものを戻す
function htmlEntityDecode(str) {
    return str.replace(/&(lt|gt|quot|amp);/g, function(_, _1) {
        return {lt:'<', gt:'>', quot:'"', amp:'&'}[_1];
    });
}
// HTMLエンティティに変換
function htmlEntityEecode(str) {
    return str.replace(/(<|>|"|&)/g, function(_, _1) {
        return '&' + {'<':'lt', '>':'gt', '"':'quot', '&':'amp'}[_1] + ';';
    });
}
/*view*/
view.popup = {
    window: null,
    timer: null,
    createWindow : function() {
        var win = Window.create({
            title: '翻訳パネル',
            width: Display.width * 0.8,
            height: 250,
            top: Display.height - 250,
            left: Display.width * 0.2,
            children: {
                ie: {
                    type: Trident,
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }
            },
            events: {
                activate: function(evt) {
                    controll.stopHideTimer();
                },
                deactivate: function(evt) {
                    controll.hideWindowDelay(win, 1000);
                }
            }
        });
        return win;
    },
    getWindow: function() {
        if (view.popup.window && view.popup.window.exists) {
            return view.popup.window;
        } else {
            try {
                view.popup.window = view.popup.createWindow();
            } catch (e) {
                println(e);
            } finally {
                w.free();
            }
            return view.popup.Window;
        }
    }
}
//view.popup.launch_server();
view.showResult = function(str) {
    if (str) {
        var win = view.popup.getWindow();
        var body = model.createViewHTML(str);
        win.ie.update(body);
        // ポップアップ内でのリンク移動にフック
        if (!win.ie.object.isObserved('BeforeNavigate2')) {
            win.ie.object.observe('BeforeNavigate2', function(o) {
                if (/^http:\/\/eow\.alc\.co\.jp/.test(o.URL)) {
                    o.Cancel = true;
                    model.getALC(o.URL, view.showResult);
                } else {
                    win.ie.invoke('navigate', o.URL);
                }
            });
        }
        controll.showWindow(win).hideWindowDelay(win, 5000);
    }
}
view.translateText = function(str) {
    var win = view.popup.getWindow();
    // 画面内でのスクロールを初期化する意味を込めて
    win.ie.update(model.createViewHTML("ロード…"));
    controll.showWindow(win);
    if (view.isWord(str)) {
        model.getALC(str, view.showResult); // 英単語翻訳
    } else {
        model.getExcite(str, view.showResult);// 文章
    }
}
/**
 * 単語ならtrue , 文章ならfalse
 * @param str
 */
view.isWord = function(str) {
    return (str.split(" ").length <= 3);
}


/* init */
model.init();
