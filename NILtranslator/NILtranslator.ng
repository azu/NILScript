// ==NILScript==
// @name NILtranslator
// @namespace http://efcl.info/
// @description コピーしたテキストを翻訳表示する
// @author azu
// @homepage http://efcl.info/
// @twitter https://twitter.com/azu_re
// ==/NILScript==
// タスクバーアイコン
Main.createNotifyIcon();
Main.addCommands({
    reset:function() {
        controll.changePopupSetting();
    },
    actionSetting:function() {
        controll.changeActionSetting();
    },
    state:function() {
        var state = this.texts.state;
        if (state == "無効") {// 動作中なら無効にチェックを入れる
            model.state = false;
            Main.addTexts({
                state:'✓無効'
            });
        } else {// 無効中なら有効に切り替える
            model.state = true;
            Main.addTexts({
                state:'無効'
            });
        }
    }
});

Main.addTexts({
    reset:'パネル設定(&P)',
    actionSetting:'動作設定(&A)',
    state:'無効'
});
Main.notifyIcon.contextMenu = ['actionSetting','reset',null,"state",null,'exit'];
//安定性向上のため推奨
Main.process.priority = Process.priority.high;
var Clipboard = require('Clipboard').Clipboard;
var Hotstrokes = require('Hotstrokes').Hotstrokes;
var Mouse = require('Mouse').Mouse;
var Display = require('Window').Display;
var http = new require("HTTP").HTTP();
var LooseXML = require('LooseXML').HTML;
use('Window', 'ATL', 'HTTPD');
// 英辞郎関係の処理ライブラリ
include("eijiro.ng");
// MVC的に作りたい
/*
 http://www.diffshare.com/blog/archives/1625
 controll - 操作する,Command
 model - 外部APIをたたいてデータの取得、変更の通知,ValueObject
 view - 結果の表示、ローカルサーバ,Mediator
 C→M→V
 UI→Mediator(V)→{M or C}
 C(データの取得依頼)→M→外部データ取得→C→M→V
 */
var controll = {}, model = {}, view = {};

/*controll*/
// ポップアップ関連の設定を変更
controll.changePopupSetting = function() {
    controll.closeWindow();
    view.settings.createWindow();
}
// 動作関連の設定を変更
controll.changeActionSetting = function() {
    controll.closeWindow();
    view.settings.createActionWindow();
}
controll.closeWindow = function(win) {
    win = (win) ? win : view.popup.popupWindow;
    if (win && win.exists) {
        win.close();
        win = null;
    }

}
controll.hideWindow = function hideWindow(win) {
    if (!win) {
        win = view.popup.getWindow();
    }
    win.hide();
    return controll;
}
controll.hideWindowDelay = function(win, msec) {
    controll.stopHideTimer();
    view.popup.timer = setTimeout(function() {
        controll.hideWindow(win);
    }, msec);
    return controll;
}
controll.stopHideTimer = function() {
    if (view.popup.timer && view.popup.timer.running) {
        view.popup.timer.stop();
    }
}
// ウィンドウを最前面に表示
controll.showWindow = function(win) {
    if (!win) {
        win = view.popup.getWindow();
    }
    if (!win.visible) {
        win.show(true);
    }
    win.topmost = true;
    return controll;
}
/*model*/
model.state = true;// デフォルトで動作中
model.clipboard = {
    hist: "",//判定用
    backupText: "",
    listner : function(evt, text) {
        // 動作中で、クリップボードの中身がtextなら
        if (model.state && Clipboard.hasFormat('text')) {
            var text = Clipboard.text;
            var hist = model.clipboard.hist;
            //println(hist + " : " + text);
            if (text && (hist !== text)) {
                model.clipboard.hist = text;
                view.translateText(text.trim());
            }
        }
    },
    addEvent : function() {
        if (!Clipboard.isObserved("change")) {
            Clipboard.observe('change', model.clipboard.listner);
        }
    },
    removeEvent : function() {
        Clipboard.unobserve('change', model.clipboard.listner);
    },
    // changeイベントが発生しないようなタイミングでfnを呼ぶ
    normalizeCallFn : function(fn) {
        model.clipboard.removeEvent();
        fn();
        model.clipboard.addEvent();
    }
}
model.fireClipbodChange = function() {
    var mc = model.clipboard;
    var bkClipboard = Clipboard.text;
    Hotstrokes.send("Ctrl+C");
    sleep(100); // コピー動作を待つ
    mc.listner();// 翻訳処理
    if (bkClipboard) {// クリップボードを戻す
        Clipboard.text = bkClipboard;
    }
}
model.getGoogleTranslator = function googleTranslator(str, callback) {
    var API = "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&langpair=en|ja&q=" + encodeURIComponent(str);
    var xhr = http.request({
        method: "get",
        url: API,
        headers: {
            'User-agent': 'Mozilla/5.0 (compatible)'
        },
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var resJSON = JSON.parse(res.readText());
                    if (resJSON.responseStatus == 200) {
                        callback(resJSON.responseData.translatedText)
                    }
                } else {
                    // callback(res.statusText);
                }
            }
        }
    }).send();
}
/**
 * http://www.excite.co.jp/world/english/ で英日翻訳
 * @param str
 * @param callback
 */
model.getExcite = function excite(str, callback) {
    var API = "http://www.excite.co.jp/world/english/"
    var searchRegexp = model.getExcite.regexp || (model.getExcite.regexp = /id="after".*?>([^<]*?)<\/textarea>/im);
    var xhr = http.request({
        method: "post",
        url: API,
        headers: {
            'User-agent': 'Mozilla/5.0 (compatible)',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Referer': 'http://www.excite.co.jp/world/english/'
        },
        body: "before=" + view.encodePlus(str) + "&wb_lp=ENJA",
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var input = res.readText();
                    if (searchRegexp.test(input)) {
                        var match = input.match(searchRegexp);
                        var m = match && match[1];
                        callback(m);
                    } else {
                        alert("No matches found!");
                    }
                } else {
                    // callback(res.statusText);
                }
            }
        }
    }).send();
}
model.getKingsoft = function kingsoft(word, callback) {
    var API = (/^http/.test(word)) ? word : "http://dic.Kingsoft.jp/"
            + word
            + "/全ての辞書";

    var xhr = http.request({
        method: "get",
        url: API,
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var reshtml = new LooseXML(res),
                            parseHTML = reshtml.getElementById("content-left");
                    parseHTML = reshtml.getElementById("content-left");
                    callback(parseHTML.toString());
                } else {
                    // log(this.response);
                    callback(res.statusText);
                }
            }
        }
    }).send();
}
/**
 * http://www.alc.co.jp/ で翻訳
 * @param word
 * @param callback
 */
model.getALC = function ALC(word, callback) {
    var API = (/^http/.test(word)) ? word : "http://eow.alc.co.jp/eow/sp/" + view.encodePlus(word) + "/UTF-8/";
    var xhr = http.request({
        method: "get",
        url: API,
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var resTxt = res.readText();
                    callback(resTxt);
                } else {
                    //callback(res.statusText);
                }
            }
        }
    }).send();
}
model.getEijiro = function eijiro(word, callback) {
    try {
        // データベースが使えるように準備
        if (!alc.isOpened()) {
            alc.openDB(setting.eijiroDatabasePath);
        }
        alc.searchEntry({
                    query: word,
                    limit : 10,
                    page : 1
                }, function(res) {
                    var result = [];
                    for (var i = 0,len = res.length; i < len; i++) {
                        result.push(alc.convertRuby(htmlEscape(res[i])))
                    }
                    var html = result.join("<br>");
                    callback(html);
                }
        );
    } catch(e) {
        log(e)
    } finally {
        alc.closeDB();
    }
    /*
     * usual HTML escape
     */
    var htmlEscapePattern = {'>':'&gt;', '<':'&lt;', '&':'&amp;', '"':'&quot;', "'":'&apos;'};
    // omit the apostrophe because I have to deal with apostrophes by regexp
    var re_htmlunsafe = /[&"><]/g;

    function htmlEscape(text) {
        return (text + '').replace(re_htmlunsafe, function(m) {
            return htmlEscapePattern[m];
        });
    }
}
// cssファイルを読み込む
model.popupStyle = Main.scriptDirectory.file("panel-style.css").load();
model.createViewHTML = function(text, servicename) {
    var style = model.popupStyle;
    var script = "";
    var siteID = servicename || "default";
    var e4x = <html>
        <head>
            <style type="text/css">
            %style%
            </style>
            <script type="text/javascript">
            %script%
            </script>
        </head>
        <body>
            <div id="%siteID%" calss="main">
            %text%
            </div>
        </body>
    </html>.toString()
            .replace("%style%", style)
            .replace("%script%", script)
            .replace("%siteID%", siteID)
            .replace("%text%", text);
    return e4x;
}
function xmlToDom(xml, xmlns) {
    var doc = (new DOMParser).parseFromString(
            '<root xmlns="' + xmlns + '">' + xml.toXMLString() + "</root>",
            "application/xml");
    var imported = document.importNode(doc.documentElement, true);
    var range = document.createRange();
    range.selectNodeContents(imported);
    var fragment = range.extractContents();
    range.detach();
    return fragment.childNodes.length > 1 ? fragment : fragment.firstChild;
}
/*view*/
view.settings = {
    actionWindow:null,
    popupWindow : null,

    setValues : function(rect) {
        var win = view.settings.popupWindow;
        win.sleft.text = rect.left;
        win.stop.text = rect.top;
        win.swidth.text = rect.width;
        win.sheight.text = rect.height;
    },
    reDraw : function() {
        var win = view.settings.popupWindow;
        win.x = win.sleft.text
        win.y = win.stop.text;
        win.width = win.swidth.text;
        win.height = win.sheight.text;
        var alphaValue = (win.salpha.text !== "") ? win.salpha.text - 1 : undefined;
        if (10 <= alphaValue && alphaValue <= 255) {
            win.alpha = alphaValue;
        }
    },
    createWindow : function() {
        view.settings.popupWindow = Window.create({
            title : "設定",
            top:200,left:200,
            width:200,height:200,
            topmost:true,
            children: {
                save : {
                    type:Button,
                    text: "保存",
                    height:20,
                    width:45,
                    top:95,
                    left:140,
                    events:{
                        click:function() {
                            var rect = view.settings.popupWindow.rect;
                            var win = view.settings.popupWindow;
                            if (win.salpha.text !== "") {
                                var alphaValue = win.salpha.text - 0;
                                rect.alpha = alphaValue;
                            }
                            pref("settings.json", 1).saveJSON(rect);
                            this.parent.close(true);
                        }
                    }
                },
                redraw : {
                    type:Button,
                    text: "描画",
                    height:20,
                    width:45,
                    top:120,
                    left:140,
                    events:{
                        click:function() {
                            view.settings.reDraw();
                        }
                    }
                },
                sleft: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 40,
                    left: 20,
                    height: 20,
                    width:50
                },
                stop: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 20,
                    left: 70,
                    height: 20,
                    width:50
                },
                swidth: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 40,
                    left: 120,
                    height: 20,
                    width:50
                },
                sheight: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 60,
                    left: 70,
                    height: 20,
                    width:50
                },
                salphaLabel : {
                    noHideSel: true,
                    type: Static,
                    text: "アルファ値(10-255)",
                    wantReturn: true,
                    top: 100,
                    left: 10,
                    height: 24,
                    width:50
                },
                salpha : {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 100,
                    left: 70,
                    height: 20,
                    width:50
                }
            },
            events:{
                activate : function() {
                    view.settings.setValues(this.rect);
                },
                resize : function() {
                    view.settings.setValues(this.rect);
                },
                mbuttonUp:function(o) {
                    view.settings.setValues(this.rect)
                }
            }
        }).show();
        view.settings.popupWindow.focus();
    },
    createActionWindow : function() {

        try {
            view.settings.actionWindow = Window.create({
                title : "設定",
                top:200,left:200,
                width:400,height:300,
                children: {
                    save : {
                        type:Button,
                        text: "保存",
                        height:20,
                        width:45,
                        bottom:25,
                        right:25,
                        events:{
                            click:function() {
                                var win = view.settings.actionWindow;
                                var dict = win.dictionaryService.selectedString;
                                if (dict === "英辞郎" && !win.eijiroDatabasePath.text) {
                                    alert("英辞郎を利用する場合はローカルのデータベースファイルを指定してください!");
                                    return;
                                }
                                var obj = {
                                    shortcutkey : win.shortcutkey.text.trim(),
                                    translateWhenCopy : win.translateWhenCopy.checked,
                                    dictionaryService :win.dictionaryService.selectedString,
                                    translateService :win.translateService.selectedString,
                                    hideDalayTime : win.hideDalayTime.text,
                                    eijiroDatabasePath :win.eijiroDatabasePath.text
                                }
                                for (var i in obj) {
                                    setting[i] = obj[i];
                                }
                                pref("action_settings.json", 1).saveJSON(obj);
                                this.parent.close(true);
                                view.settings.actionWindow = null;
                            }
                        }
                    },
                    translateWhenCopy : {
                        type: CheckBox,
                        checked : setting.translateWhenCopy,
                        text: "*テキストコピーで翻訳",
                        top: 25,
                        left: 20,
                        height: 20,
                        width:150
                    },
                    shortcutkeyLabel : {
                        noHideSel: true,
                        type: Static,
                        text: "*ショートカットキー:",
                        wantReturn: true,
                        top: 50,
                        left: 20,
                        height: 24,
                        width:100
                    },
                    shortcutkey : {
                        type: Edit,
                        text: setting.shortcutkey,
                        autoVScroll:true,// はみ出た部分がスクロールできるようになる
                        autoHScroll:true,
                        top: 50,
                        left: 120,
                        height: 20,
                        width:200
                    },
                    // action.translateService
                    dictionaryServiceLabel : {
                        noHideSel: true,
                        type: Static,
                        text: "単語辞書サービス:",
                        wantReturn: true,
                        top: 80,
                        left: 20,
                        height: 24,
                        width:100
                    },
                    dictionaryService:{
                        type:ComboBox,
                        isDropDownList:true,
                        items:["Kingsoft" , "英辞郎"],
                        droppedCount:5,
                        hasVScroll:true,
                        bottom:0,
                        top:80,
                        left:120,
                        width:128,
                        height:48
                    },
                    // action.translateService
                    translateServiceLabel : {
                        noHideSel: true,
                        type: Static,
                        text: "翻訳するサービス:",
                        wantReturn: true,
                        top: 110,
                        left: 20,
                        height: 24,
                        width:100
                    },
                    translateService:{
                        type:ComboBox,
                        isDropDownList:true,
                        items:["Google" , "Excite"],
                        droppedCount:5,
                        hasVScroll:true,
                        bottom:0,
                        top:110,
                        left:120,
                        width:128,
                        height:48
                    },
                    hideDalayTimeLabel : {
                        noHideSel: true,
                        type: Static,
                        text: "ポップアップの\n消失時間(ミリ秒):",
                        wantReturn: true,
                        top: 140,
                        left: 20,
                        height: 24,
                        width:100
                    },
                    hideDalayTime : {
                        type: Edit,
                        text: setting.hideDalayTime,
                        wantReturn: true,
                        top: 140,
                        left: 120,
                        height: 20,
                        width:100
                    },
                    eijiroDatabaseLabel : {
                        type: Static,
                        text: "英辞郎のDBファイル:",
                        top: 170,
                        left: 20,
                        height: 20,
                        width:100
                    },
                    eijiroDatabasePath : {
                        type: Edit,
                        text: setting.eijiroDatabasePath,
                        autoVScroll:true,// はみ出た部分がスクロールできるようになる
                        autoHScroll:true,
                        top: 170,
                        left: 120,
                        height: 20,
                        width:200
                    },
                    eijiroDatabaseButton : {
                        type: Button,
                        text: "...",
                        wantReturn: true,
                        top: 170,
                        left: 320,
                        height: 20,
                        width:20,
                        events : {
                            click : function(o) {
                                var File = require('Dialog').FileDialog.show();
                                var win = view.settings.actionWindow;
                                if (File) {
                                    win.eijiroDatabasePath.text = File.path;
                                    setting.eijiroDatabasePath = File.path;
                                }
                            }
                        }
                    },
                    disc : {
                        noHideSel: true,
                        type: Static,
                        text: "ショートカットキーはHotstrokesクラスに従ったキー\n"
                                + "*は設定変更はソフトウェアの再起動後に反映",
                        wantReturn: true,
                        bottom: 10,
                        left: 20,
                        height: 24,
                        width:250
                    }
                },
                events:{
                    create:function(o) {
                        var defTranslateService = (setting.translateService)
                                ? setting.translateService : "Google";
                        this.translateService.selectString(defTranslateService);
                        var defDictionaryService = (setting.dictionaryService)
                                ? setting.dictionaryService : "Kingsoft";
                        this.dictionaryService.selectString(defDictionaryService);

                    }
                }
            }).show();
        } catch(e) {
            log("設定画面", e);
        }
        view.settings.actionWindow.focus();
    }
}
view.popup = {
    popupWindow: null,
    timer: null,
    createWindow : function() {
        var loadData = pref("settings.json", 1).loadJSON();
        var isData = (loadData) ? true : false;
        var win = Window.create({
            title: '翻訳パネル',
            isPopupWindow:true,hasTickFrame:false,hasBorder:false,hasDlgFrame:false,
            transparentColor:0xFF01FF,
            alpha:(isData && isData.alpha) ? loadData.alpha : 216,
            width: (isData) ? loadData.width : Display.width * 0.8,
            height: (isData) ? loadData.height : 250,
            top: (isData) ? loadData.top : Display.height - 250,
            left: (isData) ? loadData.left : Display.width * 0.2,
            children: {
                ie: {
                    type: Trident,
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }
            },
            events: {
                activate: function(evt) {
                    controll.stopHideTimer();
                },
                deactivate: function(evt) {
                    controll.hideWindowDelay(win, 1000);
                }
            }
        });
        return win;
    },
    getWindow: function() {
        if (view.popup.popupWindow && view.popup.popupWindow.exists) {
            return view.popup.popupWindow;
        } else {
            view.popup.popupWindow = view.popup.createWindow();
            return view.popup.popupWindow;
        }
    }
}
//view.popup.launch_server();
view.showResult = function(str) {
    if (str) {
        var win = view.popup.getWindow();
        var body = model.createViewHTML(str, view.translateByService.name);
        win.ie.update(body);
        // ポップアップ内でのリンク移動にフック
        /*
         if (!win.ie.object.isObserved('BeforeNavigate2')) {
         win.ie.object.observe('BeforeNavigate2', function(o) {
         o.Cancel = true;
         if (/^http:\/\/eow\.alc\.co\.jp/.test(o.URL)) {
         model.getALC(o.URL, view.showResult);
         } else {
         win.ie.invoke('navigate', o.URL);
         }
         });
         }*/
        controll.showWindow(win).hideWindowDelay(win, setting.hideDalayTime);
    } else {
        var win = view.popup.getWindow();
        win.ie.update(model.createViewHTML("該当結果はありませんでした"));
        sleep(500);
        controll.hideWindow(win);
    }
}
view.translateByService = "";// ポップアップする際に使用してるサービス
view.translateText = function(str) {
    var win = view.popup.getWindow();
    // 画面内でのスクロールを初期化する意味を込めて
    win.ie.update(model.createViewHTML("ロード中…"));
    controll.showWindow(win);
    if (view.isWord(str)) {
        view.translateByService = {
            "Kingsoft" : model.getKingsoft,
            "英辞郎" : model.getEijiro
        }[setting.dictionaryService];
    } else {
        view.translateByService = {
            "Google" : model.getGoogleTranslator,
            "Excite" : model.getExcite
        }[setting.translateService];
    }
    view.translateByService(str, view.showResult);// 文章
}

/**
 * 単語ならtrue , 文章ならfalse
 * @param str
 */
view.isWord = function(str) {
    return (str.split(" ").length <= 3);
}
view.encodePlus = function(str) {
    return encodeURIComponent(str).replace("%20", "+", "g")
}

/* init */
var setting = {};
setting.init = function() {
    setting.load();
    setting.setDafault();
}
setting.load = function() {
    setting.action = pref("action_settings.json", 1).loadJSON();
}
setting.setDafault = function() {
    var action = setting.action || {};
    // ショートカットキー
    setting.shortcutkey = (action.shortcutkey) ? action.shortcutkey : 'Shift*2'
    // クリップボードにコピーした時に動作するか
    setting.translateWhenCopy = (action.translateWhenCopy) ? action.translateWhenCopy : false;
    // 辞書サービス
    setting.dictionaryService = (action.dictionaryService) ? action.dictionaryService : "Kingsoft";
    // 翻訳サービス
    setting.translateService = (action.translateService) ? action.translateService : "google";
    // 翻訳パネルが消える時間ms
    setting.hideDalayTime = (action.hideDalayTime) ? action.hideDalayTime : 5000;
    // 英辞郎のDBがあるかどうか
    setting.eijiroDatabasePath = (action.eijiroDatabasePath) ? action.eijiroDatabasePath : "";

    if (!setting.eijiroDatabasePath) {
        // 英辞郎ないなら
        setting.dictionaryService = "Kingsoft";
    }
    if (setting.translateWhenCopy) {
        model.clipboard.addEvent();
    }
    // キーボード
    if (typeof setting.shortcutkey !== "object") {
        setting.mapkey = {};
        setting.mapkey[setting.shortcutkey] = function() {
            log(setting.shortcutkey);
            Thread.create(function() {
                model.fireClipbodChange();
            })
        }
    } else { // 設定ファイルを書き換えて、オブジェクトでも指定可能にする
        setting.mapkey = setting.shortcutkey;
    }
    // ショートカット設定
    try {
        Hotstrokes.use('Mouse', 'IME')
                .map(setting.mapkey).register();
    } catch(e) {
        alert(e);
    }
}
// 初期化
setting.init();


function log() {
    println.apply(this, arguments);
}