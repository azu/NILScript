// ==NILScript==
// @name NILtranslator
// @namespace http://efcl.info/
// @description コピーしたテキストを翻訳表示する
// @author azu
// @homepage http://efcl.info/
// @twitter https://twitter.com/azu_re
// ==/NILScript==
// タスクバーアイコン
Main.createNotifyIcon();
Main.addCommands({
    reset:function() {
        controll.settingChange();
    }
});
Main.addTexts({
    reset:'パネル設定(&P)'
});
Main.notifyIcon.contextMenu = ['reset',null,'exit'];
//安定性向上のため推奨
Main.process.priority = Process.priority.high;
var Clipboard = require('Clipboard').Clipboard;
var Hotstrokes = require('Hotstrokes').Hotstrokes;
var Mouse = require('Mouse').Mouse;
var Display = require('Window').Display;
var http = new require("HTTP").HTTP();
use('Window', 'ATL', 'HTTPD');
// MVC的に作りたい
/*
 http://www.diffshare.com/blog/archives/1625
 controll - 操作する,Command
 model - 外部APIをたたいてデータの取得、変更の通知,ValueObject
 view - 結果の表示、ローカルサーバ,Mediator
 C→M→V
 UI→Mediator(V)→{M or C}
 C(データの取得依頼)→M→外部データ取得→C→M→V
 */
var controll = {}, model = {}, view = {};

/*controll*/
controll.settingChange = function() {
    controll.closeWindow();
    view.settings.createWindow();
}
controll.closeWindow = function(win) {
    win = (win) ? win : view.popup.window;
    if (win && win.exists) {
        win.close();
        win = null;
    }

}
controll.hideWindow = function hideWindow(win) {
    if (!win) {
        win = view.popup.getWindow();
    }
    win.hide();
    return controll;
}
controll.hideWindowDelay = function(win, msec) {
    controll.stopHideTimer();
    view.popup.timer = new Timer((function() {
        controll.hideWindow(win);
    }), msec, true);
    view.popup.timer.run();
    return controll;
}
controll.stopHideTimer = function() {
    if (view.popup.timer && view.popup.timer.running) {
        view.popup.timer.stop();
    }
}
// ウィンドウを最前面に表示
controll.showWindow = function(win) {
    controll.stopHideTimer();
    if (!win) {
        win = view.popup.getWindow();
    }
    if (!win.visible) {
        win.show(true);
    }
    win.topmost = true;
    return controll;
}
/*model*/
model.clipboard = {
    // イベントのadd,removeはロックしてからやる
    locked: false,
    hist: "",
    listner : function(obj) {
        if (this.hasFormat('text')) {
            var text = this.text;
            var hist = model.clipboard.hist;
            // println(hist + " : " + text);
            if (text && (hist !== text)) {
                model.clipboard.hist = text;
                view.translateText(text);
            }
        }
    },
    addEvent : function() {
        if (!Clipboard.isObserved("change")) {
            Clipboard.observe('change', model.clipboard.listner);
        }
    },
    removeEvent : function() {
        Clipboard.unobserve('change', model.clipboard.listner);
    },
    // changeイベントが発生しないようなタイミングでfnを呼ぶ
    normalizeCallFn : function(fn) {
        model.clipboard.removeEvent();
        fn();
        model.clipboard.addEvent();
    }
}
model.fireClipbodChange = function() {
    if (!model.clipboard.locked) {
        model.clipboard.locked = true;
        var bkText = Clipboard.text;
        model.clipboard.addEvent();
        Hotstrokes.send("Ctrl+C");
        // model.clipboard.removeEvent();
        Clipboard.text = bkText;
        model.clipboard.locked = false;
        //        model.clipboard.normalizeCallFn((function(bkText) {
        //            return function() {
        //                Clipboard.text = bkText;
        //                model.clipboard.locked = false;
        //            }
        //        })(bkText));
    }
}
model.googleTranslator = function(str, callback) {
    var API = "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&langpair=en|ja&q=" + encodeURIComponent(str);
    var searchRegexp = model.getExcite.regexp || (model.getExcite.regexp = /id="after".*?>([^<]*?)<\/textarea>/im);
    var xhr = http.request({
        method: "get",
        url: API,
        headers: {
            'User-agent': 'Mozilla/5.0 (compatible)',
        },
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    println(res);
                    var resJSON = JSON.parse(res.readText());
                    if (resJSON.responseStatus == 200) {
                        callback(resJSON.responseData.translatedText)
                    }
                } else {
                    // callback(res.statusText);
                }
            }
        }
    }).send();
}
/**
 * http://www.excite.co.jp/world/english/ で英日翻訳
 * @param str
 * @param callback
 */
model.getExcite = function(str, callback) {
    var API = "http://www.excite.co.jp/world/english/"
    var searchRegexp = model.getExcite.regexp || (model.getExcite.regexp = /id="after".*?>([^<]*?)<\/textarea>/im);
    var xhr = http.request({
        method: "post",
        url: API,
        headers: {
            'User-agent': 'Mozilla/5.0 (compatible)',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Referer': 'http://www.excite.co.jp/world/english/'
        },
        body: "before=" + view.encodePlus(str) + "&wb_lp=ENJA",
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var input = res.readText();
                    if (searchRegexp.test(input)) {
                        var match = input.match(searchRegexp);
                        var m = match && match[1];
                        println(match);
                        callback(m);
                    } else {
                        alert("No matches found!");
                    }
                } else {
                    // callback(res.statusText);
                }
            }
        }
    }).send();
}
/**
 * http://www.alc.co.jp/ で翻訳
 * @param word
 * @param callback
 */
model.getALC = function (word, callback) {
    var API = (/^http/.test(word)) ? word : "http://eow.alc.co.jp/eow/sp/" + word + "/UTF-8/";
    var xhr = http.request({
        method: "get",
        url: API,
        events: {
            response: function() {
                var res = this.response;
                if (res.status == 200) {
                    var resTxt = res.readText();
                    callback(resTxt);
                } else {
                    //callback(res.statusText);
                }
            }
        }
    }).send();
}
// cssファイルを読み込む
model.popupStyle = Main.scriptDirectory.file("panel-style.css").load();
model.createViewHTML = function(text) {
    var style = model.popupStyle;
    var HTML = '<html>'
            + '<head>'
            + '<style type="text/css">'
            + style
            + '</style>'
            + '<script type="text/javascript">'
            + 'document.createElement("kn");document.createElement("md");//IE Hack'
            + '</script>'
            + '</head>'
            + '<body>'
            + '<div id="main">'
            + text
            + '</body>'
            + '</html>';
    return HTML;
}

/*view*/
view.settings = {
    window : null,
    setValues : function(rect) {
        var win = view.settings.window;
        win.sleft.text = rect.left;
        win.stop.text = rect.top;
        win.swidth.text = rect.width;
        win.sheight.text = rect.height;
    },
    reDraw : function() {
        var win = view.settings.window;
        win.x = win.sleft.text
        win.y = win.stop.text;
        win.width = win.swidth.text;
        win.height = win.sheight.text;
        var alphaValue = (win.salpha.text !== "") ? win.salpha.text - 1 : undefined;
        if (10 <= alphaValue && alphaValue <= 255) {
            win.alpha = alphaValue;
        }
    },
    createWindow : function() {
        view.settings.window = Window.create({
            top:200,left:200,
            width:200,height:200,
            topmost:true,
            children: {
                save : {
                    type:Button,
                    text: "保存",
                    height:20,
                    width:45,
                    top:90,
                    left:125,
                    events:{
                        click:function() {
                            var rect = view.settings.window.rect;
                            var win = view.settings.window;
                            if (win.salpha.text !== "") {
                                var alphaValue = win.salpha.text - 0;
                                rect.alpha = alphaValue;
                            }

                            pref("settings.json", 1).saveJSON(rect);
                            this.parent.close(true);
                        }
                    }
                },
                redraw : {
                    type:Button,
                    text: "描画",
                    height:20,
                    width:45,
                    top:120,
                    left:125,
                    events:{
                        click:function() {
                            view.settings.reDraw();
                        }
                    }
                },
                sleft: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 60,
                    left: 20,
                    height: 20,
                    width:50
                },
                stop: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 40,
                    left: 70,
                    height: 20,
                    width:50
                },
                swidth: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 60,
                    left: 120,
                    height: 20,
                    width:50
                },
                sheight: {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 80,
                    left: 70,
                    height: 20,
                    width:50
                },
                salphaLabel : {
                    noHideSel: true,
                    type: Static,
                    text: "アルファ値(10-255)",
                    wantReturn: true,
                    top: 120,
                    left: 20,
                    height: 24,
                    width:50
                },
                salpha : {
                    noHideSel: true,
                    type: Edit,
                    text: "",
                    wantReturn: true,
                    top: 120,
                    left: 70,
                    height: 20,
                    width:50
                }
            },

            events:{
                activate : function() {
                    view.settings.setValues(this.rect);
                },
                resize : function() {
                    view.settings.setValues(this.rect);
                },
                mbuttonUp:function(o) {
                    view.settings.setValues(this.rect)
                }
            }
        }).show();
        view.settings.window.focus();
    }
}
view.popup = {
    window: null,
    timer: null,
    createWindow : function() {
        var loadData = pref("settings.json", 1).loadJSON();
        var isData = (loadData) ? true : false;
        var win = Window.create({
            title: '翻訳パネル',
            isPopupWindow:true,hasTickFrame:false,hasBorder:false,hasDlgFrame:false,
            transparentColor:0xFF01FF,
            alpha:(isData && isData.alpha) ? loadData.alpha : 216,
            width: (isData) ? loadData.width : Display.width * 0.8,
            height: (isData) ? loadData.height : 250,
            top: (isData) ? loadData.top : Display.height - 250,
            left: (isData) ? loadData.left : Display.width * 0.2,
            children: {
                ie: {
                    type: Trident,
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }
            },
            events: {
                activate: function(evt) {
                    controll.stopHideTimer();
                },
                deactivate: function(evt) {
                    controll.hideWindowDelay(win, 1000);
                }
            }
        });
        return win;
    },
    getWindow: function() {
        if (view.popup.window && view.popup.window.exists) {
            return view.popup.window;
        } else {
            view.popup.window = view.popup.createWindow();
            return view.popup.window;
        }
    }
}
//view.popup.launch_server();
view.showResult = function(str) {
    println("view.showResult : " + str)
    if (str) {
        var win = view.popup.getWindow();
        var body = model.createViewHTML(str);
        win.ie.update(body);
        // ポップアップ内でのリンク移動にフック
        if (!win.ie.object.isObserved('BeforeNavigate2')) {
            win.ie.object.observe('BeforeNavigate2', function(o) {
                if (/^http:\/\/eow\.alc\.co\.jp/.test(o.URL)) {
                    o.Cancel = true;
                    model.getALC(o.URL, view.showResult);
                } else {
                    win.ie.invoke('navigate', o.URL);
                }
            });
        }
        controll.showWindow(win).hideWindowDelay(win, 5000);
    } else {
        var win = view.popup.getWindow();
        controll.hideWindow(win);
    }
}
view.translateText = function(str) {
    var win = view.popup.getWindow();
    // 画面内でのスクロールを初期化する意味を込めて
    win.ie.update(model.createViewHTML("ロード中…"));
    controll.showWindow(win);
    if (view.isWord(str)) {
        model.getALC(str, view.showResult); // 英単語翻訳
    } else {
        model.googleTranslator(str, view.showResult);// 文章
    }
}
/**
 * 単語ならtrue , 文章ならfalse
 * @param str
 */
view.isWord = function(str) {
    return (str.split(" ").length <= 3);
}
view.encodePlus = function(str) {
    return encodeURIComponent(str).replace("%20", "+", "g")
}

/* init */
//model.clipboard.addEvent();
Hotstrokes.defineConditions({}).map({
    'Shift*2':function() {
        model.fireClipbodChange();
    }
}).register();

function log() {
    println.apply(this, arguments);
}